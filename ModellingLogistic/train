#!/usr/bin/env Rscript

library(data.table) # Opted for this, 1. Because its really fast 2. dplyr conflicted with plumber
library(rjson) # for handling json data
library(randomForest)
# use pattern to read data : this is to make the model generic 
fname_train <- dir(path = "./../ml_vol/", pattern = "\\_train.csv$")
fname_schema <- dir(path = "./../ml_vol/", pattern = "\\_schema.json$")

# read in the schema so that we extract the response variable
dataschema <- fromJSON(file = paste0("./../ml_vol/",fname_schema))

# import the training data 
genericdata <- fread(paste0("./../ml_vol/",fname_train))

# call the preprocessing pipeline 
source("preprocessor.R")
#preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)

id <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[3]]
rfdata <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[1]]
varr <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[2]]


#function to train the model  and save it back into the mounted volume
lets_train <- function(dat,rvar){

  rf <- randomForest(eval(as.symbol(paste0(varr))) ~ ., data = dat, proximity=TRUE, importance=TRUE)
  # save the model into the artifacts folder in the attached volume.
  saveRDS(rf, "./../ml_vol/rfmodel.rds")

}

# calling the model
glmModel <- lets_train(dat=rfdata, rvar = varr)

